//
//  LoginViewController.swift
//  CleanSwiftDemo1
//
//  Created by zeba on 26/11/19.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginDisplayLogic: AnyObject {
    func displaySomething(viewModel: Login.User.ViewModel)
}

class LoginViewController: UIViewController, LoginDisplayLogic {
    
    @IBOutlet weak var usenameTxtfld: UITextField!
    @IBOutlet weak var passwordTxtFld: UITextField!
    @IBOutlet weak var loginBtn: UIButton!
    
    var isLogin = false
    var interactor: LoginBusinessLogic?
    var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    private func setup() {
        
        let viewController = self
        let interactor = LoginInteractor()
        let presenter = LoginPresenter()
        let router = LoginRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        
        setupUI()
    }
    
    // MARK: Do something
    func doSomething() {
        
        let loginInfo = Login.LoginInfo(userName: usenameTxtfld.text ?? "", password: passwordTxtFld.text ?? "")
        let request = Login.User.Request(loginInfo: loginInfo)
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: Login.User.ViewModel) {
        if viewModel.isSuccess {
            router?.routeToSomewhere(segue: nil)
        }else{
            showErrorAlert(message: viewModel.message ?? "")
        }
    }
}

extension LoginViewController {
    
    private func setupUI() {
        loginBtn.layer.cornerRadius = 5
        loginBtn.addTarget(self, action: #selector(loginButtonClicked), for: .touchUpInside)
    }
    
    @objc private func loginButtonClicked() {
        self.view.endEditing(true)
        doSomething()
    }
    
    private func showErrorAlert(message: String) {
        let alert = UIAlertController(title: "", message: message, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
        present(alert, animated: true, completion: nil)
    }
}
